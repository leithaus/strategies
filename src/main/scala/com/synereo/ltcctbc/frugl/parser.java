
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 29 05:47:27 PDT 2015
//----------------------------------------------------

package com.synereo.ltcctbc.frugl;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 29 05:47:27 PDT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\010\000\002\003" +
    "\005\000\002\004\010\000\002\005\010\000\002\006\005" +
    "\000\002\006\003\000\002\007\005\000\002\007\003\000" +
    "\002\010\005\000\002\010\003\000\002\011\013\000\002" +
    "\011\004\000\002\011\006\000\002\011\006\000\002\011" +
    "\011\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\005\000\002\013\006\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\005\000\002\016\003" +
    "\000\002\017\005\000\002\017\003\000\002\020\005\000" +
    "\002\020\003\000\002\021\005\000\002\021\003\000\002" +
    "\022\005\000\002\022\003\000\002\023\005\000\002\023" +
    "\003\000\002\024\004\000\002\024\004\000\002\024\004" +
    "\000\002\024\003\000\002\025\003\000\002\025\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\027\002\000\002\027\003\000\002\027\005" +
    "\000\002\030\002\000\002\030\003\000\002\030\005\000" +
    "\002\031\002\000\002\031\003\000\002\031\005\000\002" +
    "\032\002\000\002\032\003\000\002\032\005\000\002\033" +
    "\002\000\002\033\003\000\002\033\005\000\002\034\002" +
    "\000\002\034\003\000\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\004\004\004\001\002\000\042\004\024\005" +
    "\uffc7\014\021\016\020\017\017\022\016\036\027\037\026" +
    "\040\025\041\023\042\013\043\012\045\010\046\007\047" +
    "\015\051\033\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\016\005\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\001\002\000\016\005\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\013\uffe7\014\uffe7\001\002\000\016\005" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\001\002" +
    "\000\016\005\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\001\002\000\016\005\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\001\002\000\016\005\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\014\ufff0\001\002\000\016\005\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\001\002\000" +
    "\016\005\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\001\002\000\004\004\173\001\002\000\040\004\024\014" +
    "\021\016\020\017\017\022\016\036\027\037\026\040\025" +
    "\041\023\042\013\043\012\045\010\046\007\047\015\051" +
    "\033\001\002\000\004\020\167\001\002\000\004\005\163" +
    "\001\002\000\004\004\160\001\002\000\040\004\024\014" +
    "\021\016\020\017\017\022\016\036\027\037\026\040\025" +
    "\041\023\042\013\043\012\045\010\046\007\047\015\051" +
    "\033\001\002\000\004\004\153\001\002\000\016\005\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\001\002\000" +
    "\004\004\116\001\002\000\006\010\046\012\047\001\002" +
    "\000\016\005\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\001\002\000\016\005\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\001\002\000\016\005\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\001\002\000\016\005\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\001\002\000" +
    "\016\005\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\042" +
    "\001\002\000\006\005\uffc6\011\044\001\002\000\014\005" +
    "\ufffb\010\ufffb\011\ufffb\012\ufffb\013\040\001\002\000\040" +
    "\004\024\014\021\016\020\017\017\022\016\036\027\037" +
    "\026\040\025\041\023\042\013\043\012\045\010\046\007" +
    "\047\015\051\033\001\002\000\016\005\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\014\042\001\002\000\040\004\024" +
    "\014\021\016\020\017\017\022\016\036\027\037\026\040" +
    "\025\041\023\042\013\043\012\045\010\046\007\047\015" +
    "\051\033\001\002\000\016\005\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\001\002\000\042\004\024\005\uffc7" +
    "\014\021\016\020\017\017\022\016\036\027\037\026\040" +
    "\025\041\023\042\013\043\012\045\010\046\007\047\015" +
    "\051\033\001\002\000\004\005\uffc5\001\002\000\030\004" +
    "\065\016\063\017\062\027\052\030\073\031\072\032\071" +
    "\033\070\034\067\035\066\050\051\001\002\000\040\004" +
    "\024\014\021\016\020\017\017\022\016\036\027\037\026" +
    "\040\025\041\023\042\013\043\012\045\010\046\007\047" +
    "\015\051\033\001\002\000\014\005\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\013\040\001\002\000\022\005\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\001\002" +
    "\000\022\004\065\030\073\031\072\032\071\033\070\034" +
    "\067\035\066\050\051\001\002\000\022\005\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\001" +
    "\002\000\022\005\uffd8\011\uffd8\012\uffd8\013\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\001\002\000\022\005\uffda\011" +
    "\uffda\012\uffda\013\uffda\023\uffda\024\uffda\025\uffda\026\111" +
    "\001\002\000\020\005\uffdc\011\uffdc\012\uffdc\013\uffdc\023" +
    "\uffdc\024\uffdc\025\107\001\002\000\016\005\uffde\011\uffde" +
    "\012\uffde\013\105\023\uffde\024\uffde\001\002\000\014\005" +
    "\uffe0\011\uffe0\012\103\023\uffe0\024\uffe0\001\002\000\012" +
    "\005\uffe2\011\uffe2\023\uffe2\024\101\001\002\000\022\004" +
    "\065\030\073\031\072\032\071\033\070\034\067\035\066" +
    "\050\051\001\002\000\022\004\065\030\073\031\072\032" +
    "\071\033\070\034\067\035\066\050\051\001\002\000\010" +
    "\005\uffff\011\uffff\023\077\001\002\000\030\004\065\016" +
    "\063\017\062\027\052\030\073\031\072\032\071\033\070" +
    "\034\067\035\066\050\051\001\002\000\022\005\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\001\002\000\022\005\uffcd\011\uffcd\012\uffcd\013\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\001\002\000\022\005\uffce" +
    "\011\uffce\012\uffce\013\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\001\002\000\022\005\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\001\002\000\022\005" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\001\002\000\022\005\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\001\002\000\022" +
    "\005\uffd3\011\uffd3\012\uffd3\013\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\001\002\000\006\005\076\023\077\001\002" +
    "\000\022\005\uffd2\011\uffd2\012\uffd2\013\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\001\002\000\030\004\065\016\063" +
    "\017\062\027\052\030\073\031\072\032\071\033\070\034" +
    "\067\035\066\050\051\001\002\000\012\005\uffe3\011\uffe3" +
    "\023\uffe3\024\101\001\002\000\030\004\065\016\063\017" +
    "\062\027\052\030\073\031\072\032\071\033\070\034\067" +
    "\035\066\050\051\001\002\000\014\005\uffe1\011\uffe1\012" +
    "\103\023\uffe1\024\uffe1\001\002\000\030\004\065\016\063" +
    "\017\062\027\052\030\073\031\072\032\071\033\070\034" +
    "\067\035\066\050\051\001\002\000\016\005\uffdf\011\uffdf" +
    "\012\uffdf\013\105\023\uffdf\024\uffdf\001\002\000\030\004" +
    "\065\016\063\017\062\027\052\030\073\031\072\032\071" +
    "\033\070\034\067\035\066\050\051\001\002\000\020\005" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\023\uffdd\024\uffdd\025\107" +
    "\001\002\000\030\004\065\016\063\017\062\027\052\030" +
    "\073\031\072\032\071\033\070\034\067\035\066\050\051" +
    "\001\002\000\022\005\uffdb\011\uffdb\012\uffdb\013\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\111\001\002\000\030\004\065" +
    "\016\063\017\062\027\052\030\073\031\072\032\071\033" +
    "\070\034\067\035\066\050\051\001\002\000\022\005\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\001\002\000\022\005\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\001\002\000\022\005" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\001\002\000\022\005\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\001\002\000\010" +
    "\005\uffbe\014\021\051\033\001\002\000\004\005\123\001" +
    "\002\000\006\005\uffbd\011\121\001\002\000\010\005\uffbe" +
    "\014\021\051\033\001\002\000\004\005\uffbc\001\002\000" +
    "\004\006\124\001\002\000\004\004\126\001\002\000\004" +
    "\015\150\001\002\000\042\004\024\005\uffca\014\021\016" +
    "\020\017\017\022\016\036\027\037\026\040\025\041\023" +
    "\042\013\043\012\045\010\046\007\047\015\051\033\001" +
    "\002\000\004\005\133\001\002\000\010\005\uffc9\011\131" +
    "\012\047\001\002\000\042\004\024\005\uffca\014\021\016" +
    "\020\017\017\022\016\036\027\037\026\040\025\041\023" +
    "\042\013\043\012\045\010\046\007\047\015\051\033\001" +
    "\002\000\004\005\uffc8\001\002\000\004\006\134\001\002" +
    "\000\006\007\uffc4\044\135\001\002\000\004\004\143\001" +
    "\002\000\006\007\uffc3\015\141\001\002\000\004\007\140" +
    "\001\002\000\012\007\ufffe\011\ufffe\015\ufffe\021\ufffe\001" +
    "\002\000\006\007\uffc4\044\135\001\002\000\004\007\uffc2" +
    "\001\002\000\040\004\024\014\021\016\020\017\017\022" +
    "\016\036\027\037\026\040\025\041\023\042\013\043\012" +
    "\045\010\046\007\047\015\051\033\001\002\000\006\011" +
    "\145\012\047\001\002\000\040\004\024\014\021\016\020" +
    "\017\017\022\016\036\027\037\026\040\025\041\023\042" +
    "\013\043\012\045\010\046\007\047\015\051\033\001\002" +
    "\000\006\005\147\012\047\001\002\000\006\007\ufffd\015" +
    "\ufffd\001\002\000\004\004\126\001\002\000\004\007\152" +
    "\001\002\000\016\005\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\001\002\000\040\004\024\014\021\016\020" +
    "\017\017\022\016\036\027\037\026\040\025\041\023\042" +
    "\013\043\012\045\010\046\007\047\015\051\033\001\002" +
    "\000\004\005\155\001\002\000\016\005\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\001\002\000\006\005\157" +
    "\012\047\001\002\000\016\005\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\001\002\000\040\004\024\014\021" +
    "\016\020\017\017\022\016\036\027\037\026\040\025\041" +
    "\023\042\013\043\012\045\010\046\007\047\015\051\033" +
    "\001\002\000\004\005\162\001\002\000\016\005\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\001\002\000\004" +
    "\006\164\001\002\000\006\007\uffc4\044\135\001\002\000" +
    "\004\007\166\001\002\000\004\002\000\001\002\000\004" +
    "\004\126\001\002\000\004\021\171\001\002\000\016\005" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\001\002" +
    "\000\016\005\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\001\002\000\010\005\uffbe\014\021\051\033\001\002" +
    "\000\004\005\175\001\002\000\004\006\176\001\002\000" +
    "\006\004\126\007\uffc1\001\002\000\006\007\uffc0\011\202" +
    "\001\002\000\004\007\201\001\002\000\016\005\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\001\002\000\006" +
    "\004\126\007\uffc1\001\002\000\004\007\uffbf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\004\002\004\001\001\000\026\003\035\006" +
    "\027\007\036\010\034\011\033\012\031\013\010\014\013" +
    "\015\030\030\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\171\012\031\013\010\014\013\015\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\155\007\036\010\034\011\033\012\031\013\010\014" +
    "\013\015\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\040\011\033\012\031\013\010\014\013\015\030\001\001" +
    "\000\002\001\001\000\014\011\042\012\031\013\010\014" +
    "\013\015\030\001\001\000\002\001\001\000\026\003\035" +
    "\006\027\007\036\010\034\011\033\012\031\013\010\014" +
    "\013\015\030\030\044\001\001\000\002\001\001\000\024" +
    "\016\063\017\060\020\057\021\056\022\055\023\054\024" +
    "\053\025\052\026\073\001\001\000\020\007\047\010\034" +
    "\011\033\012\031\013\010\014\013\015\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\114\026\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\113\026\073\001\001\000" +
    "\006\025\112\026\073\001\001\000\002\001\001\000\024" +
    "\016\074\017\060\020\057\021\056\022\055\023\054\024" +
    "\053\025\052\026\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\017\077\020\057\021\056\022" +
    "\055\023\054\024\053\025\052\026\073\001\001\000\002" +
    "\001\001\000\020\020\101\021\056\022\055\023\054\024" +
    "\053\025\052\026\073\001\001\000\002\001\001\000\016" +
    "\021\103\022\055\023\054\024\053\025\052\026\073\001" +
    "\001\000\002\001\001\000\014\022\105\023\054\024\053" +
    "\025\052\026\073\001\001\000\002\001\001\000\012\023" +
    "\107\024\053\025\052\026\073\001\001\000\002\001\001" +
    "\000\010\024\111\025\052\026\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\117\033\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\117\033\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\124\001\001\000" +
    "\002\001\001\000\024\006\127\007\036\010\034\011\033" +
    "\012\031\013\010\014\013\015\030\027\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\127\007\036" +
    "\010\034\011\033\012\031\013\010\014\013\015\030\027" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\135\031\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\135" +
    "\031\141\001\001\000\002\001\001\000\022\006\143\007" +
    "\036\010\034\011\033\012\031\013\010\014\013\015\030" +
    "\001\001\000\002\001\001\000\022\006\145\007\036\010" +
    "\034\011\033\012\031\013\010\014\013\015\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\153" +
    "\012\031\013\010\014\013\015\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\160\012\031\013\010\014\013\015\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\135\031\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\117\033" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\176\032\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\176\032\202\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public com.synereo.ltcctbc.frugl.Absyn.TypedExpr pTypedExpr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.synereo.ltcctbc.frugl.Absyn.TypedExpr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListFormalExpr ::= FormalExpr _SYMB_5 ListFormalExpr 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListFormalExpr RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.FormalExpr p_1 = (com.synereo.ltcctbc.frugl.Absyn.FormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.ListFormalExpr p_3 = (com.synereo.ltcctbc.frugl.Absyn.ListFormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalExpr",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListFormalExpr ::= FormalExpr 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListFormalExpr RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.FormalExpr p_1 = (com.synereo.ltcctbc.frugl.Absyn.FormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListFormalExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalExpr",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListFormalExpr ::= 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListFormalExpr RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListFormalExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFormalExpr",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ListNominal ::= Nominal _SYMB_5 ListNominal 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListNominal RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Nominal p_1 = (com.synereo.ltcctbc.frugl.Absyn.Nominal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.ListNominal p_3 = (com.synereo.ltcctbc.frugl.Absyn.ListNominal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListNominal",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ListNominal ::= Nominal 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListNominal RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Nominal p_1 = (com.synereo.ltcctbc.frugl.Absyn.Nominal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListNominal(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListNominal",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListNominal ::= 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListNominal RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListNominal(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListNominal",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListPfExpr ::= PfExpr _SYMB_5 ListPfExpr 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListPfExpr RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.PfExpr p_1 = (com.synereo.ltcctbc.frugl.Absyn.PfExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.ListPfExpr p_3 = (com.synereo.ltcctbc.frugl.Absyn.ListPfExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPfExpr",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListPfExpr ::= PfExpr 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListPfExpr RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.PfExpr p_1 = (com.synereo.ltcctbc.frugl.Absyn.PfExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListPfExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPfExpr",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListPfExpr ::= 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListPfExpr RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListPfExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListPfExpr",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ListCoEquation ::= CoEquation _SYMB_9 ListCoEquation 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListCoEquation RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.CoEquation p_1 = (com.synereo.ltcctbc.frugl.Absyn.CoEquation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.ListCoEquation p_3 = (com.synereo.ltcctbc.frugl.Absyn.ListCoEquation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCoEquation",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListCoEquation ::= CoEquation 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListCoEquation RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.CoEquation p_1 = (com.synereo.ltcctbc.frugl.Absyn.CoEquation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListCoEquation(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCoEquation",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListCoEquation ::= 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListCoEquation RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListCoEquation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListCoEquation",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListTypedTerm ::= TypedTerm _SYMB_5 ListTypedTerm 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListTypedTerm RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.TypedTerm p_1 = (com.synereo.ltcctbc.frugl.Absyn.TypedTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.ListTypedTerm p_3 = (com.synereo.ltcctbc.frugl.Absyn.ListTypedTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTypedTerm",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListTypedTerm ::= TypedTerm 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListTypedTerm RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.TypedTerm p_1 = (com.synereo.ltcctbc.frugl.Absyn.TypedTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListTypedTerm(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTypedTerm",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ListTypedTerm ::= 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListTypedTerm RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListTypedTerm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTypedTerm",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ListTerm ::= Term _SYMB_5 ListTerm 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListTerm RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Term p_1 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.ListTerm p_3 = (com.synereo.ltcctbc.frugl.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTerm",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListTerm ::= Term 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListTerm RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Term p_1 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListTerm(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTerm",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ListTerm ::= 
            {
              com.synereo.ltcctbc.frugl.Absyn.ListTerm RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListTerm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTerm",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // GroundType ::= _SYMB_20 
            {
              com.synereo.ltcctbc.frugl.Absyn.GroundType RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.BTCType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GroundType",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // GroundType ::= _SYMB_25 
            {
              com.synereo.ltcctbc.frugl.Absyn.GroundType RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GroundType",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // GroundType ::= _SYMB_24 
            {
              com.synereo.ltcctbc.frugl.Absyn.GroundType RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.UnitType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GroundType",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // GroundType ::= _SYMB_23 
            {
              com.synereo.ltcctbc.frugl.Absyn.GroundType RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GroundType",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // GroundType ::= _SYMB_21 
            {
              com.synereo.ltcctbc.frugl.Absyn.GroundType RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.DoubleType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GroundType",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // GroundType ::= _SYMB_22 
            {
              com.synereo.ltcctbc.frugl.Absyn.GroundType RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.IntegerType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GroundType",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // GroundType ::= UIdent 
            {
              com.synereo.ltcctbc.frugl.Absyn.GroundType RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.UserDefinedType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GroundType",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LTyp7 ::= _SYMB_0 LTyp _SYMB_1 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_2 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp7",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LTyp7 ::= GroundType 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.GroundType p_1 = (com.synereo.ltcctbc.frugl.Absyn.GroundType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.FoundationType(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp7",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LTyp6 ::= LTyp7 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_1 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp6",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LTyp6 ::= _SYMB_19 LTyp7 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_2 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.NegationType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp6",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LTyp6 ::= _SYMB_11 LTyp7 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_2 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ReplicationType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp6",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LTyp6 ::= _SYMB_10 LTyp7 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_2 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.DurationType(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp6",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LTyp5 ::= LTyp6 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_1 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp5",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LTyp5 ::= LTyp5 _SYMB_18 LTyp6 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_1 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_3 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ConfirmationType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp5",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LTyp4 ::= LTyp5 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_1 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp4",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LTyp4 ::= LTyp4 _SYMB_17 LTyp5 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_1 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_3 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.SelectionType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp4",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LTyp3 ::= LTyp4 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_1 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp3",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LTyp3 ::= LTyp3 _SYMB_7 LTyp4 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_1 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_3 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.SeparationType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp3",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LTyp2 ::= LTyp3 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_1 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp2",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LTyp2 ::= LTyp2 _SYMB_6 LTyp3 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_1 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_3 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.FusionType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp2",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LTyp1 ::= LTyp2 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_1 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LTyp1 ::= LTyp1 _SYMB_16 LTyp2 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_1 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_3 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ExplicationType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp1",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LTyp ::= LTyp1 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_1 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LTyp ::= LTyp _SYMB_15 LTyp1 
            {
              com.synereo.ltcctbc.frugl.Absyn.LTyp RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_1 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_3 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ImplicationType(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTyp",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ValueExpr ::= _SYMB_30 
            {
              com.synereo.ltcctbc.frugl.Absyn.ValueExpr RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.BTCUnitLiteral(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ValueExpr ::= _SYMB_27 
            {
              com.synereo.ltcctbc.frugl.Absyn.ValueExpr RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.CoUnitLiteral(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ValueExpr ::= _SYMB_31 
            {
              com.synereo.ltcctbc.frugl.Absyn.ValueExpr RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.UnitLiteral(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ValueExpr ::= _STRING_ 
            {
              com.synereo.ltcctbc.frugl.Absyn.ValueExpr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.StringLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ValueExpr ::= _INTEGER_ 
            {
              com.synereo.ltcctbc.frugl.Absyn.ValueExpr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.IntegerLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ValueExpr ::= _DOUBLE_ 
            {
              com.synereo.ltcctbc.frugl.Absyn.ValueExpr RESULT =null;
		Double p_1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.DecimalLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ValueExpr",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FormalExpr ::= _SYMB_14 
            {
              com.synereo.ltcctbc.frugl.Absyn.FormalExpr RESULT =null;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.Wildcard(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalExpr",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FormalExpr ::= Nominal 
            {
              com.synereo.ltcctbc.frugl.Absyn.FormalExpr RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Nominal p_1 = (com.synereo.ltcctbc.frugl.Absyn.Nominal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.Indication(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalExpr",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Nominal ::= LIdent 
            {
              com.synereo.ltcctbc.frugl.Absyn.Nominal RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.AtomLiteral(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Nominal",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Nominal ::= _SYMB_8 _SYMB_12 PfExpr _SYMB_13 
            {
              com.synereo.ltcctbc.frugl.Absyn.Nominal RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.PfExpr p_3 = (com.synereo.ltcctbc.frugl.Absyn.PfExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.Transcription(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Nominal",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Term4 ::= _SYMB_0 Term _SYMB_1 
            {
              com.synereo.ltcctbc.frugl.Absyn.Term RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Term p_2 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term4",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Term4 ::= ValueExpr 
            {
              com.synereo.ltcctbc.frugl.Absyn.Term RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.ValueExpr p_1 = (com.synereo.ltcctbc.frugl.Absyn.ValueExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.Value(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term4",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Term4 ::= FormalExpr 
            {
              com.synereo.ltcctbc.frugl.Absyn.Term RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.FormalExpr p_1 = (com.synereo.ltcctbc.frugl.Absyn.FormalExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.Mention(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term4",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Term3 ::= Term4 
            {
              com.synereo.ltcctbc.frugl.Absyn.Term RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Term p_1 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term3",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Term3 ::= _SYMB_11 _SYMB_0 ListNominal _SYMB_1 _SYMB_2 ListPfExpr _SYMB_3 
            {
              com.synereo.ltcctbc.frugl.Absyn.Term RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.ListNominal p_3 = (com.synereo.ltcctbc.frugl.Absyn.ListNominal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		com.synereo.ltcctbc.frugl.Absyn.ListPfExpr p_6 = (com.synereo.ltcctbc.frugl.Absyn.ListPfExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.Extraction(p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term3",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Term3 ::= _SYMB_29 _SYMB_0 Term3 _SYMB_1 
            {
              com.synereo.ltcctbc.frugl.Absyn.Term RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Term p_3 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.InjectionRight(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term3",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Term3 ::= _SYMB_28 _SYMB_0 Term3 _SYMB_1 
            {
              com.synereo.ltcctbc.frugl.Absyn.Term RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Term p_3 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.InjectionLeft(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term3",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Term3 ::= _SYMB_10 Term3 
            {
              com.synereo.ltcctbc.frugl.Absyn.Term RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Term p_2 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.Duration(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term3",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Term3 ::= _SYMB_26 _SYMB_0 ListNominal _SYMB_1 _SYMB_2 PfExpr _SYMB_9 PfExpr _SYMB_3 
            {
              com.synereo.ltcctbc.frugl.Absyn.Term RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.ListNominal p_3 = (com.synereo.ltcctbc.frugl.Absyn.ListNominal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		com.synereo.ltcctbc.frugl.Absyn.PfExpr p_6 = (com.synereo.ltcctbc.frugl.Absyn.PfExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.synereo.ltcctbc.frugl.Absyn.PfExpr p_8 = (com.synereo.ltcctbc.frugl.Absyn.PfExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.Selection(p_3,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term3",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Term2 ::= Term3 
            {
              com.synereo.ltcctbc.frugl.Absyn.Term RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Term p_1 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term2",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Term2 ::= Term2 _SYMB_8 Term3 
            {
              com.synereo.ltcctbc.frugl.Absyn.Term RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Term p_1 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.Term p_3 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.Duplication(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term2",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Term1 ::= Term2 
            {
              com.synereo.ltcctbc.frugl.Absyn.Term RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Term p_1 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term1",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Term1 ::= Term1 _SYMB_7 Term2 
            {
              com.synereo.ltcctbc.frugl.Absyn.Term RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Term p_1 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.Term p_3 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.Separation(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term1",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Term ::= Term1 
            {
              com.synereo.ltcctbc.frugl.Absyn.Term RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Term p_1 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Term ::= Term _SYMB_6 Term1 
            {
              com.synereo.ltcctbc.frugl.Absyn.Term RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Term p_1 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.Term p_3 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.Fusion(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CoEquation ::= _SYMB_32 _SYMB_0 Term _SYMB_5 Term _SYMB_1 
            {
              com.synereo.ltcctbc.frugl.Absyn.CoEquation RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Term p_3 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		com.synereo.ltcctbc.frugl.Absyn.Term p_5 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.CutExpression(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CoEquation",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PfExpr ::= _SYMB_0 ListTerm _SYMB_1 _SYMB_2 ListCoEquation _SYMB_3 
            {
              com.synereo.ltcctbc.frugl.Absyn.PfExpr RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.ListTerm p_2 = (com.synereo.ltcctbc.frugl.Absyn.ListTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		com.synereo.ltcctbc.frugl.Absyn.ListCoEquation p_5 = (com.synereo.ltcctbc.frugl.Absyn.ListCoEquation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.ProofExpression(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PfExpr",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TypedTerm ::= Term _SYMB_4 LTyp 
            {
              com.synereo.ltcctbc.frugl.Absyn.TypedTerm RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.Term p_1 = (com.synereo.ltcctbc.frugl.Absyn.Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		com.synereo.ltcctbc.frugl.Absyn.LTyp p_3 = (com.synereo.ltcctbc.frugl.Absyn.LTyp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.TypeAssignment(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypedTerm",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TypedExpr ::= _SYMB_0 ListTypedTerm _SYMB_1 _SYMB_2 ListCoEquation _SYMB_3 
            {
              com.synereo.ltcctbc.frugl.Absyn.TypedExpr RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.ListTypedTerm p_2 = (com.synereo.ltcctbc.frugl.Absyn.ListTypedTerm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		com.synereo.ltcctbc.frugl.Absyn.ListCoEquation p_5 = (com.synereo.ltcctbc.frugl.Absyn.ListCoEquation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new com.synereo.ltcctbc.frugl.Absyn.TypeJudgment(p_2,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypedExpr",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= TypedExpr EOF 
            {
              Object RESULT =null;
		com.synereo.ltcctbc.frugl.Absyn.TypedExpr start_val = (com.synereo.ltcctbc.frugl.Absyn.TypedExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

