// -*- Java -*- This Cup file was machine-generated by BNFC
package com.synereo.ltcctbc.frugl;

parser code {:
  public com.synereo.ltcctbc.frugl.Absyn.TypedExpr pTypedExpr() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (com.synereo.ltcctbc.frugl.Absyn.TypedExpr) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal com.synereo.ltcctbc.frugl.Absyn.TypedExpr TypedExpr;
nonterminal com.synereo.ltcctbc.frugl.Absyn.TypedTerm TypedTerm;
nonterminal com.synereo.ltcctbc.frugl.Absyn.PfExpr PfExpr;
nonterminal com.synereo.ltcctbc.frugl.Absyn.CoEquation CoEquation;
nonterminal com.synereo.ltcctbc.frugl.Absyn.Term Term;
nonterminal com.synereo.ltcctbc.frugl.Absyn.Term Term1;
nonterminal com.synereo.ltcctbc.frugl.Absyn.Term Term2;
nonterminal com.synereo.ltcctbc.frugl.Absyn.Term Term3;
nonterminal com.synereo.ltcctbc.frugl.Absyn.Term Term4;
nonterminal com.synereo.ltcctbc.frugl.Absyn.Nominal Nominal;
nonterminal com.synereo.ltcctbc.frugl.Absyn.FormalExpr FormalExpr;
nonterminal com.synereo.ltcctbc.frugl.Absyn.ValueExpr ValueExpr;
nonterminal com.synereo.ltcctbc.frugl.Absyn.LTyp LTyp;
nonterminal com.synereo.ltcctbc.frugl.Absyn.LTyp LTyp1;
nonterminal com.synereo.ltcctbc.frugl.Absyn.LTyp LTyp2;
nonterminal com.synereo.ltcctbc.frugl.Absyn.LTyp LTyp3;
nonterminal com.synereo.ltcctbc.frugl.Absyn.LTyp LTyp4;
nonterminal com.synereo.ltcctbc.frugl.Absyn.LTyp LTyp5;
nonterminal com.synereo.ltcctbc.frugl.Absyn.LTyp LTyp6;
nonterminal com.synereo.ltcctbc.frugl.Absyn.LTyp LTyp7;
nonterminal com.synereo.ltcctbc.frugl.Absyn.GroundType GroundType;
nonterminal com.synereo.ltcctbc.frugl.Absyn.ListTerm ListTerm;
nonterminal com.synereo.ltcctbc.frugl.Absyn.ListTypedTerm ListTypedTerm;
nonterminal com.synereo.ltcctbc.frugl.Absyn.ListCoEquation ListCoEquation;
nonterminal com.synereo.ltcctbc.frugl.Absyn.ListPfExpr ListPfExpr;
nonterminal com.synereo.ltcctbc.frugl.Absyn.ListNominal ListNominal;
nonterminal com.synereo.ltcctbc.frugl.Absyn.ListFormalExpr ListFormalExpr;

terminal _SYMB_0;    //   (
terminal _SYMB_1;    //   )
terminal _SYMB_2;    //   {
terminal _SYMB_3;    //   }
terminal _SYMB_4;    //   :
terminal _SYMB_5;    //   ,
terminal _SYMB_6;    //   #
terminal _SYMB_7;    //   *
terminal _SYMB_8;    //   @
terminal _SYMB_9;    //   ;
terminal _SYMB_10;    //   ?
terminal _SYMB_11;    //   !
terminal _SYMB_12;    //   <
terminal _SYMB_13;    //   >
terminal _SYMB_14;    //   _
terminal _SYMB_15;    //   -o
terminal _SYMB_16;    //   ->
terminal _SYMB_17;    //   +
terminal _SYMB_18;    //   &
terminal _SYMB_19;    //   ~
terminal _SYMB_20;    //   BTC
terminal _SYMB_21;    //   Double
terminal _SYMB_22;    //   Int
terminal _SYMB_23;    //   String
terminal _SYMB_24;    //   Unit
terminal _SYMB_25;    //   Void
terminal _SYMB_26;    //   choose
terminal _SYMB_27;    //   hash
terminal _SYMB_28;    //   inl
terminal _SYMB_29;    //   inr
terminal _SYMB_30;    //   satoshi
terminal _SYMB_31;    //   star
terminal _SYMB_32;    //   txn

terminal String _STRING_;

terminal Integer _INTEGER_;
terminal Double _DOUBLE_;


terminal String UIdent;
terminal String LIdent;


start with TypedExpr;


TypedExpr ::= _SYMB_0 ListTypedTerm:p_2 _SYMB_1 _SYMB_2 ListCoEquation:p_5 _SYMB_3  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.TypeJudgment(p_2,p_5); :} 
;
TypedTerm ::= Term:p_1 _SYMB_4 LTyp:p_3  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.TypeAssignment(p_1,p_3); :} 
;
PfExpr ::= _SYMB_0 ListTerm:p_2 _SYMB_1 _SYMB_2 ListCoEquation:p_5 _SYMB_3  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ProofExpression(p_2,p_5); :} 
;
CoEquation ::= _SYMB_32 _SYMB_0 Term:p_3 _SYMB_5 Term:p_5 _SYMB_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.CutExpression(p_3,p_5); :} 
;
Term ::= Term:p_1 _SYMB_6 Term1:p_3  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.Fusion(p_1,p_3); :} 
  | Term1:p_1  {: RESULT = p_1; :}
;
Term1 ::= Term1:p_1 _SYMB_7 Term2:p_3  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.Separation(p_1,p_3); :} 
  | Term2:p_1  {: RESULT = p_1; :}
;
Term2 ::= Term2:p_1 _SYMB_8 Term3:p_3  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.Duplication(p_1,p_3); :} 
  | Term3:p_1  {: RESULT = p_1; :}
;
Term3 ::= _SYMB_26 _SYMB_0 ListNominal:p_3 _SYMB_1 _SYMB_2 PfExpr:p_6 _SYMB_9 PfExpr:p_8 _SYMB_3  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.Selection(p_3,p_6,p_8); :} 
  | _SYMB_10 Term3:p_2  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.Duration(p_2); :}
  | _SYMB_28 _SYMB_0 Term3:p_3 _SYMB_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.InjectionLeft(p_3); :}
  | _SYMB_29 _SYMB_0 Term3:p_3 _SYMB_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.InjectionRight(p_3); :}
  | _SYMB_11 _SYMB_0 ListNominal:p_3 _SYMB_1 _SYMB_2 ListPfExpr:p_6 _SYMB_3  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.Extraction(p_3,p_6); :}
  | Term4:p_1  {: RESULT = p_1; :}
;
Term4 ::= FormalExpr:p_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.Mention(p_1); :} 
  | ValueExpr:p_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.Value(p_1); :}
  | _SYMB_0 Term:p_2 _SYMB_1  {: RESULT = p_2; :}
;
Nominal ::= _SYMB_8 _SYMB_12 PfExpr:p_3 _SYMB_13  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.Transcription(p_3); :} 
  | LIdent:p_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.AtomLiteral(p_1); :}
;
FormalExpr ::= Nominal:p_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.Indication(p_1); :} 
  | _SYMB_14  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.Wildcard(); :}
;
ValueExpr ::= _DOUBLE_:p_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.DecimalLiteral(p_1); :} 
  | _INTEGER_:p_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.IntegerLiteral(p_1); :}
  | _STRING_:p_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.StringLiteral(p_1); :}
  | _SYMB_31  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.UnitLiteral(); :}
  | _SYMB_27  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.CoUnitLiteral(); :}
  | _SYMB_30  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.BTCUnitLiteral(); :}
;
LTyp ::= LTyp:p_1 _SYMB_15 LTyp1:p_3  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ImplicationType(p_1,p_3); :} 
  | LTyp1:p_1  {: RESULT = p_1; :}
;
LTyp1 ::= LTyp1:p_1 _SYMB_16 LTyp2:p_3  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ExplicationType(p_1,p_3); :} 
  | LTyp2:p_1  {: RESULT = p_1; :}
;
LTyp2 ::= LTyp2:p_1 _SYMB_6 LTyp3:p_3  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.FusionType(p_1,p_3); :} 
  | LTyp3:p_1  {: RESULT = p_1; :}
;
LTyp3 ::= LTyp3:p_1 _SYMB_7 LTyp4:p_3  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.SeparationType(p_1,p_3); :} 
  | LTyp4:p_1  {: RESULT = p_1; :}
;
LTyp4 ::= LTyp4:p_1 _SYMB_17 LTyp5:p_3  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.SelectionType(p_1,p_3); :} 
  | LTyp5:p_1  {: RESULT = p_1; :}
;
LTyp5 ::= LTyp5:p_1 _SYMB_18 LTyp6:p_3  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ConfirmationType(p_1,p_3); :} 
  | LTyp6:p_1  {: RESULT = p_1; :}
;
LTyp6 ::= _SYMB_10 LTyp7:p_2  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.DurationType(p_2); :} 
  | _SYMB_11 LTyp7:p_2  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ReplicationType(p_2); :}
  | _SYMB_19 LTyp7:p_2  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.NegationType(p_2); :}
  | LTyp7:p_1  {: RESULT = p_1; :}
;
LTyp7 ::= GroundType:p_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.FoundationType(p_1); :} 
  | _SYMB_0 LTyp:p_2 _SYMB_1  {: RESULT = p_2; :}
;
GroundType ::= UIdent:p_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.UserDefinedType(p_1); :} 
  | _SYMB_22  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.IntegerType(); :}
  | _SYMB_21  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.DoubleType(); :}
  | _SYMB_23  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.StringType(); :}
  | _SYMB_24  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.UnitType(); :}
  | _SYMB_25  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.VoidType(); :}
  | _SYMB_20  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.BTCType(); :}
;
ListTerm ::=  /* empty */  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListTerm(); :} 
  | Term:p_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListTerm(); RESULT.addLast(p_1); :}
  | Term:p_1 _SYMB_5 ListTerm:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListTypedTerm ::=  /* empty */  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListTypedTerm(); :} 
  | TypedTerm:p_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListTypedTerm(); RESULT.addLast(p_1); :}
  | TypedTerm:p_1 _SYMB_5 ListTypedTerm:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListCoEquation ::=  /* empty */  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListCoEquation(); :} 
  | CoEquation:p_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListCoEquation(); RESULT.addLast(p_1); :}
  | CoEquation:p_1 _SYMB_9 ListCoEquation:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListPfExpr ::=  /* empty */  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListPfExpr(); :} 
  | PfExpr:p_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListPfExpr(); RESULT.addLast(p_1); :}
  | PfExpr:p_1 _SYMB_5 ListPfExpr:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListNominal ::=  /* empty */  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListNominal(); :} 
  | Nominal:p_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListNominal(); RESULT.addLast(p_1); :}
  | Nominal:p_1 _SYMB_5 ListNominal:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListFormalExpr ::=  /* empty */  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListFormalExpr(); :} 
  | FormalExpr:p_1  {: RESULT = new com.synereo.ltcctbc.frugl.Absyn.ListFormalExpr(); RESULT.addLast(p_1); :}
  | FormalExpr:p_1 _SYMB_5 ListFormalExpr:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;

